1.AOP(Aspect Orient Programming)作为面向对象编程的一种补充,广泛应用于处理一些具有横切性质的系统级服务,
     如事务管理,安全检查,缓存,对象池管理等.AOP实现的关键就在于 AOP框架自动创建的 AOP代理,AOP 代理则可分为静态代理和动态代理两大类,
     其中静态代理是指使用 AOP框架提供的命令进行编译,从而在编译阶段就可生成 AOP代理类,因此也称为编译时增强;
     而动态代理则在运行时借助于 JDK 动态代理,CGLIB 等在内存中"临时"生成 AOP动态代理类,因此也被称为运行时增强.
2.Spring AOP也是对目标类增强,生成代理类.但是与AspectJ的最大区别在于---Spring AOP的运行时增强,而AspectJ是编译时增强.     
3.与 AspectJ 相对的还有另外一种 AOP 框架,它不需要在编译时对目标类进行增强,而是运行时生成目标类的代理类,
     该代理类要么与目标类实现相同的接口,要么是目标类的子类――总之,代理类的实例可作为目标类的实例来使用.
     一般来说,编译时增强的AOP框架在性能上更有优势――因为运行时动态增强的 AOP框架需要每次运行时都进行动态增强.
4.认为AspectJ是Spring AOP一部分,是因为Spring AOP使用了AspectJ的Annotation.使用了Aspect来定义切面,使用Pointcut来定义切入点,使用Advice来定义增强处理.
    虽然使用了Aspect的Annotation,但是并没有使用它的编译器和织入器.其实现原理是JDK动态代理,在运行时生成代理类
5.CGLIB包的底层是通过使用一个小而快的字节码处理框架ASM(Java字节码操控框架),来转换字节码并生成新的类.


