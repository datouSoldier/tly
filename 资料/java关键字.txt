transient和volatile
transient有“临时的”，"短暂的"含义，
我们了解过Serializable，Java序列化，
当对某些变量我们不想对它进行序列化的时候就可以将此变量设置为transient，transient是Java语言的关键字，
用来表示一个域不是该对象串行化的一部分。transient说明一个属性是临时的，不会被序列化。



volatile
指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。
volatile关键字的两层语义
一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：
1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。
2）禁止进行指令重排序。
自增操作不是原子性操作，而且volatile也无法保证对变量的任何操作都是原子性的
在 Java 中双重检查模式无效的原因是在不同步的情况下引用类型不是线程安全的 对于除了 long 和 double 的基本类型，双重检查模式是适用 的
可以使用 volatile 关键字来保证多线程下的单例
double和long类型变量的非原子处理：
如果一个double或者long变量没有声明为volatile ，
则变量的read或write动作，
实际在主内存处理时是把它当作两个32位的read或write动作，
这两个动作在时间上是分开的，可能会有其它的动作介于它们之间。
这样的结果是，如果两个并发的线程对共享的非volatile 类型的double或long变量赋不同的值，
那么随后对该变量的使用而获取的值可能不等于任何一个线程所赋的值，
而可能是依赖于具体应用的两个线程所赋的值的混合。基于目前32芯片技术，在共享double和long变量时必须同步。